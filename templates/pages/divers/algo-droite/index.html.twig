{% extends "@includes/base-post-mathml.html.twig" %}

{% block article %}
    <p>Durant mes études... j'ai travaillé sur un jeu de puissance 4 en assembleur, à cette occasion, j'ai eu à trouver
        une technique de tracé de droite et de cercle en minimisant les calculs.</p>
    <p>J'ai découvert plus tard que cet algorithme avait déjà un nom. C'est celui de leur inventeur originel : <a
                href="http://fr.wikipedia.org/wiki/Jack_E._Bresenham" rel="external">Jack E. Bresenham</a></p>
    <p>Vous trouverez ici ma forme de cet algorithme de tracé de droite.</p>

    <h2 class="section-heading">Schéma</h2>
    <div class="row">
        <div class="col-md-5">
            <img src="img2.gif" class="img-fluid"/>
        </div>
        <div class="col-md-7">
            Point 1 (`X_(1)`, `Y_(1)`) : en bas à gauche<br/>Point 2 (`X_(2)`,
            `Y_(2)`) : en haut à droite<br/>`Deltax = X_(2) - X_(1)` : écart des abscisses<br/>`Deltay = Y_(2) - Y_(1)`
            :
            écart des ordonnées
        </div>
    </div>

    <h2 class="section-heading">L'idée</h2>
    <div class="row">
        <div class="col-md-5">
            <img src="img3.gif" class="img-fluid"/>
        </div>
        <div class="col-md-7">
            La droite `(D2)` est la droite théorique tracée entre le point de départ et le point d'arrivée<br/>
            La droite `(D1)` est la droite parallèle à `(D)` mais passant par le centre de `A`<br/>
            La droite `(D2)` est la droite parallèle à `(D)` mais passant par le centre de `B`<br/>

            L'idée est de choisir le point suivant pour lequel l'écart cumulé sera minimal.
        </div>
    </div>

    <h2 class="section-heading">Petits calculs</h2>
    <p>
        <b>Equation de la droite `(D)` :</b><br/>
        `y = a*x + b` avec `a = (Deltay)/(Deltax)` et `b = Y_(1) - (Deltay)/(Deltax)*X_(1)`<br/>
        d'où `(E) : y = (Deltay)/(Deltax)*x + b`
    </p><p>
    <b>Equation de la droite `(D1)` :</b><br/>
    `y' = a*x' + b'` avec `a = (Deltay)/(Deltax)` et `b' = b + Delta_(1)` et `y' = y + 1` et `x' = x + 1`<br/>
    d'où `(E_(1)) : y + 1 = (Deltay)/(Deltax)*(x + 1) + b + Delta_(1)`<br/>
    `(E_(1) - E) : 1 = (Deltay)/(Deltax) + Delta_(1) => Delta_(1) = 1 - (Deltay)/(Deltax)`
</p><p>
    <b>Equation de la droite `(D2)` :</b><br/>`y' = a*x' + b'` avec `a = (Deltay)/(Deltax)` et `b' = b + Delta_(2)` et
    `y' = y` et `x' = x + 1`<br/>
    d'où `(E_(2)) : y = (Deltay)/(Deltax)*(x + 1) + b + Delta_(2)`<br/>
    `(E_(2) - E) : 0 = (Deltay)/(Deltax) + Delta_(2) => Delta_(2) = - (Deltay)/(Deltax)`
</p><p>
    Comme ce qui nous intéresse ce n'est pas la valeur même mais l'ordre de grandeur de `Delta_(1)` par rapport à
    `Delta_(2)`, on les multiplie par `Deltax` :<br/>
    `Delta'_(1) = Deltax - Deltay`<br/>
    `Delta'_(2) = - Deltay`
</p><p>
    Comme ce n'est pas forcément pratique de comparer des valeurs absolues dans l'algorithme, on ne va pas comparer
    `|Delta'_(1)|` avec `|Delta'_(2)|` mais plutôt `|Delta'_(2)| - |Delta'_(1)|` avec `0` d'où l'expression `2 * DeltaY
    - DeltaX` et les suivantes que vous allez voir ci-dessous.
</p>

    <h2 class="section-heading">Algorithme</h2>

    <p>
        Cet algorithme a comme syntaxe une syntaxe très basique.<br/>
        A vous de la traduire dans le language qu'il vous plaira.
    </p><p>
    Dans cet algorithme je ne me limite pas au premier quadrant comme vu ci-dessus pour exprimer les formules.
</p>
    <p>`X = X_(1)`<br/>
        `Y = Y_(1)`<br/>
        `DeltaX = |X_(2) - X_(1)|`<br/>
        `DeltaY = |Y_(2) - Y_(1)|`<br/>
        Affiche_Pixel(`X`, `Y`)</p>


    <h4>1<sup>er</sup> quadrant</h4>
    <div class="row">
        <div class="col-md-8">
            <p class="algo">
                Si `X_(1) <= X_(2)` et `Y_(1) <= Y_(2)` Alors
                <q>
                    <b># en dessous 1ere bissectrice</b><br/>
                    Si `X_(2) - X_(1) >= Y_(2) - Y_(1)` Alors
                    <q>
                        `Delta = 2 * DeltaY - DeltaX`<br/>
                        Tant que `X <> X_(2)`<br/>
                        <q>
                            `X = X + 1`<br/>
                            Si `Delta > 0` Alors<br/>
                            <q>
                                `Y = Y + 1`<br/>
                                `Delta = Delta - 2 * DeltaX`
                            </q>
                            `Delta = Delta + 2 * DeltaY`<br/>
                            Affiche_Pixel(`X`, `Y`)
                        </q>
                    </q>
                    <b># au dessus 1ere bissectrice</b><br/>
                    Sinon
                    <q>
                        `Delta = 2 * DeltaX - DeltaY`<br/>
                        Tant que `Y <> Y_(2)`<br/>
                        <q>
                            `Y = Y + 1`<br/>
                            Si `Delta > 0` Alors<br/>
                            <q>
                                `X = X + 1`<br/>
                                `Delta = Delta - 2 * DeltaY`
                            </q>
                            `Delta = Delta + 2 * DeltaX`<br/>
                            Affiche_Pixel(`X`, `Y`)
                        </q>
                    </q>
                </q>
            </p>
        </div>
        <div class="col-md-4">
            <br><img src="droite03.gif" class="img-fluid"/>
        </div>
    </div>


    <h4>2<sup>ème</sup> quadrant</h4>
    <div class="row">
        <div class="col-md-8">
            <p class="algo">
                Si `X_(1) > X_(2)` et `Y_(1) < Y_(2)` Alors<br/>
                <q>
                    <b># en dessous 2e bissectrice</b><br/>
                    Si `X_(1) - X_(2) >= Y_(2) - Y_(1)` Alors<br/>
                    <q>
                        `Delta = 2 * DeltaY - DeltaX`<br/>
                        Tant que `X <> X_(2)`<br/>
                        <q>
                            `X = X - 1`<br/>
                            Si `Delta > 0` Alors<br/>
                            <q>
                                `Y = Y + 1`<br/>
                                `Delta = Delta - 2 * DeltaX`<br/>
                            </q>
                            `Delta = Delta + 2 * DeltaY`<br/>
                            Affiche_Pixel(`X`, `Y`)<br/>
                        </q>
                    </q>
                    <b># au dessus 2e bissectrice</b><br/>
                    Sinon<br/>
                    <q>
                        `Delta = 2 * DeltaX - DeltaY`<br/>
                        Tant que `Y <> Y_(2)`<br/>
                        <q>
                            `Y = Y + 1`<br/>
                            Si `Delta > 0` Alors<br/>
                            <q>
                                `X = X - 1`<br/>
                                `Delta = Delta - 2 * DeltaY`<br/>
                            </q>
                            `Delta = Delta + 2 * DeltaX`<br/>
                            Affiche_Pixel(`X`, `Y`)<br/>
                        </q>
                    </q>
                </q>
            </p>
        </div>
        <div class="col-md-4">
            <br><img src="droite04.gif" class="img-fluid"/>
        </div>
    </div>

    <h4>3<sup>ème</sup> quadrant</h4>
    <div class="row">
        <div class="col-md-8">
            <p class="algo">
                Si `X_(1) >= X_(2)` et `Y_(1) >= Y_(2)` Alors<br/>
                <q>
                    <b># en dessous 3e bissectrice</b><br/>
                    Si `X_(1) - X_(2) >= Y_(1) - Y_(2)` Alors <br/>
                    <q>
                        `Delta = 2 * DeltaY - DeltaX`<br/>
                        Tant que `X <> X_(2)`<br/>
                        <q>
                            `X = X - 1`<br/>
                            Si `Delta > 0` Alors<br/>
                            <q>
                                `Y = Y - 1`<br/>
                                `Delta = Delta - 2 * DeltaX`<br/>
                            </q>
                            `Delta = Delta + 2 * DeltaY`<br/>
                            Affiche_Pixel(`X`, `Y`)<br/>
                        </q>
                    </q>
                    <b># au dessus 3e bissectrice</b><br/>
                    Sinon <br/>
                    <q>
                        `Delta = 2 * DeltaX - DeltaY`<br/>
                        Tant que `Y <> Y_(2)`<br/>
                        <q>
                            `Y = Y - 1`<br/>
                            Si `Delta > 0` Alors<br/>
                            <q>
                                `X = X - 1`<br/>
                                `Delta = Delta - 2 * DeltaY`<br/>
                            </q>
                            `Delta = Delta + 2 * DeltaX`<br/>
                            Affiche_Pixel(`X`, `Y`)<br/>
                        </q>
                    </q>
                </q>
            </p>
        </div>
        <div class="col-md-4">
            <br><img src="droite05.gif" class="img-fluid"/>
        </div>
    </div>

    <h4>4<sup>ème</sup> quadrant</h4>
    <div class="row">
        <div class="col-md-8">
            <p class="algo">
                Si `X_(1) < X_(2)` et `Y_(1) > Y_(2)` Alors<br/>
                <q>
                    <b># en dessous 4e bissectrice</b><br/>
                    Si `X_(2) - X_(1) >= Y_(1) - Y_(2)` Alors <br/>
                    <q>
                        `Delta = 2 * DeltaY - DeltaX`<br/>
                        Tant que `X <> X_(2)`<br/>
                        <q>
                            `X = X + 1`<br/>
                            Si `Delta > 0` Alors<br/>
                            <q>
                                `Y = Y - 1`<br/>
                                `Delta = Delta - 2 * DeltaX`<br/>
                            </q>
                            `Delta = Delta + 2 * DeltaY`<br/>
                            Affiche_Pixel(`X`, `Y`)<br/>
                        </q>
                    </q>
                    <b># au dessus 4e bissectrice</b><br/>
                    Sinon<br/>
                    <q>
                        `Delta = 2 * DeltaX - DeltaY`<br/>
                        Tant que `Y <> Y_(2)`<br/>
                        <q>
                            `Y = Y - 1`<br/>
                            Si `Delta > 0` Alors.<br/>
                            <q>
                                `X = X + 1`<br/>
                                `Delta = Delta - 2 * DeltaY`<br/>
                            </q>
                            `Delta = Delta + 2 * DeltaX`<br/>
                            Affiche_Pixel(`X`, `Y`)<br/>
                        </q>
                    </q>
                </q>
            </p>
        </div>
        <div class="col-md-4">
            <br><img src="droite06.gif" class="img-fluid"/>
        </div>
    </div>


{% endblock %}
